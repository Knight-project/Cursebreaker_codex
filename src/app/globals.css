@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 220 30% 8%; 
    --foreground: 180 10% 85%;

    --card: hsla(220, 25%, 12%, 0.85); 
    --card-foreground: 180 10% 85%;

    --popover: hsla(220, 25%, 12%, 0.85);
    --popover-foreground: 180 10% 85%;

    --primary: 180 100% 50%; 
    --primary-foreground: 220 30% 8%;

    --secondary: 220 20% 20%; 
    --secondary-foreground: 180 10% 75%;

    --muted: 220 15% 30%;
    --muted-foreground: 180 10% 55%;

    --accent: 30 100% 55%; 
    --accent-foreground: 0 0% 100%;

    --destructive: 0 80% 55%; 
    --destructive-foreground: 0 0% 100%;

    --border: 180 70% 40%; 
    --input: 220 25% 15%; 
    --ring: 180 100% 60%; 

    --radius: 0.5rem;

    --neon-glow-primary: 0 0 3px hsl(var(--primary)), 0 0 5px hsl(var(--primary));
    --neon-glow-accent: 0 0 3px hsl(var(--accent)), 0 0 5px hsl(var(--accent));
    
    --chart-1: 180 100% 50%;
    --chart-2: 30 100% 55%; 
    --chart-3: 300 100% 60%;
    --chart-4: 60 100% 50%; 
    --chart-5: 120 100% 50%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-family: var(--font-inter), sans-serif;
    background-image:
      linear-gradient(to right, hsla(var(--border), 0.08) 1px, transparent 1px),
      linear-gradient(to bottom, hsla(var(--border), 0.08) 1px, transparent 1px);
    background-size: 25px 25px; 
  }
}

/* Removed horizontal scanning line animation */

@keyframes line-scan-vertical {
  0% { 
    transform: translateY(0%); 
    opacity: 0; 
  }
  10%, 80% { 
    opacity: 0.5; /* Slightly increased opacity */
  }
  100% { 
    transform: translateY(calc(100vh + 100%)); 
    opacity: 0; 
  }
}


.particle {
  position: absolute;
  background: hsl(var(--primary)); 
  opacity: 0; 
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  box-shadow: 0 0 3px hsla(var(--primary), 0.8), 0 0 6px hsla(var(--primary), 0.6); /* Slightly more glow */
}


.neon-icon {
  filter: drop-shadow(var(--neon-glow-accent));
}
.neon-icon-primary {
 filter: drop-shadow(var(--neon-glow-primary));
}

.magical-transition {
  transition: all 0.5s cubic-bezier(0.25, 1, 0.5, 1);
}

.screen-flash {
  animation: screenFlashAnimation 0.7s ease-out;
}

@keyframes screenFlashAnimation {
  0% { opacity: 0; background-color: hsla(var(--primary), 0.3); }
  50% { opacity: 0.7; background-color: hsla(var(--primary), 0.6); }
  100% { opacity: 0; background-color: hsla(var(--primary), 0.3); }
}

::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}
::-webkit-scrollbar-track {
  background: hsl(var(--background));
  border-left: 1px solid hsl(var(--border));
  border-top: 1px solid hsl(var(--border));
}
::-webkit-scrollbar-thumb {
  background: hsl(var(--primary));
}
::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--accent));
}
::-webkit-scrollbar-corner {
  background: hsl(var(--background));
}

@keyframes orbit-rotate {
  0% { transform: translate(-50%, -50%) rotate(0deg); } /* Ensure transform is part of animation keyframes */
  100% { transform: translate(-50%, -50%) rotate(360deg); }
}

.orbit-arc {
  position: absolute; /* Ensures commonArcStyles' position:absolute is not overridden by mistake */
  /* top, left, transform will be applied via inline styles for centering */
  border-radius: 50%;
  pointer-events: none;
  border-style: solid;
  border-width: 1.5px; 
  border-color: transparent;
  /* Base animation applied to all arcs, individual delays in X classes */
  animation-name: orbit-rotate; /* Reference the keyframe */
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}

.orbit-arc-1 {
  animation-duration: 6s;
  animation-delay: 0s;
  border-top-color: hsla(var(--primary), 0.9);
}
.orbit-arc-2 {
  animation-duration: 6s;
  animation-delay: -1.5s; 
  border-right-color: hsla(var(--primary), 0.9);
}
.orbit-arc-3 {
  animation-duration: 6s;
  animation-delay: -3s;
  border-bottom-color: hsla(var(--primary), 0.9);
}

/* Static arcs for avatars */
.avatar-arc-container {
  position: relative;
  display: inline-block; /* Or block, depending on layout needs */
}

.avatar-static-arc {
  position: absolute;
  top: 50%;
  left: 50%;
  border-radius: 50%;
  border-style: solid;
  border-width: 2px;
  pointer-events: none;
}

.avatar-static-arc-1 {
  /* Example: outer arc */
  border-color: hsla(var(--primary), 0.5);
  /* transform needs to be set based on parent size, example below */
}

.avatar-static-arc-2 {
  /* Example: inner arc */
  border-color: hsla(var(--accent), 0.4);
   /* transform needs to be set based on parent size, example below */
}
.avatar-static-arc-3 {
  border-color: hsla(var(--border), 0.3);
}
